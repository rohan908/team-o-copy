generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Employee {
  name          String
  email         String
  employeeid    Int             @id @default(autoincrement())
  clerkId       String          @unique
  role          String
  RfidCard      RfidCard[]
  RfidAccessLog RfidAccessLog[]
}

model langaugeServiceRequest {
  requestID    Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  date         String
  time         String
  language     String
  description  String?
  department   String
  employeeName String
  hospital     String
  priority     String
  status       String
}

model sanitationServiceRequest {
  requestID    Int      @id @default(autoincrement())
  employeeName String
  department   String
  createdAt    DateTime @default(now())
  date         String
  time         String
  priority     String
  status       String
  cleanupType  String
  hospital     String
  description  String?
}

model maintenanceServiceRequest {
  requestID       Int      @id @default(autoincrement())
  employeeName    String
  department      String
  createdAt       DateTime @default(now())
  date            String
  time            String
  priority        String
  status          String
  maintenanceType String
  hospital        String
  description     String?
}

model securityServiceRequest {
  requestID    Int      @id @default(autoincrement())
  employeeName String
  department   String
  createdAt    DateTime @default(now())
  date         String
  time         String
  security     String
  status       String
  priority     String
  hospital     String
  description  String
}

model directory {
  dName          String
  building       String
  description    String
  absoluteCoords Int[]

  @@id([dName, building])
}

model FloorMap {
  id    Int    @id @default(autoincrement())
  name  String
  edges Edge[]
  nodes Node[]
}

model Node {
  id              Int      @id @default(autoincrement())
  x               Int
  y               Int
  floor           Int
  mapId           Int
  name            String
  description     String
  nodeType        String
  connectingNodes Int[]
  map             FloorMap @relation(fields: [mapId], references: [id])
}

model Edge {
  id     Int      @id @default(autoincrement())
  weight Float
  mapId  Int
  nodes  Int[]
  map    FloorMap @relation(fields: [mapId], references: [id])
}

model RfidCard {
  uid        String   @id
  employee   Employee @relation(fields: [employeeId], references: [employeeid])
  employeeId Int
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model RfidAccessLog {
  id         Int      @id @default(autoincrement())
  cardUid    String
  employee   Employee @relation(fields: [employeeId], references: [employeeid])
  employeeId Int
  accessTime DateTime @default(now())
  accessType String // "granted" or "denied"
  location   String?
}

model Algorithm {
  id Int @id
  algoID  Int
}
