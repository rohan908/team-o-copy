// This is your Prisma schema file, learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// creates the employee table
model Employee {
  employeeid  Int    @id @default(autoincrement())
  name        String
  address     String
  phoneNumber Int
  email       String
  position    String
}

// creates the langauageServiceRequest table (strong entity)
model langaugeServiceRequest {
  requestID    Int      @id @default(autoincrement())
  employeeName String
  department   String
  createdAt    DateTime @default(now())
  date         String
  time         String
  priority     String
  status       String
  language     String
  hospital     String
  description  String?
}

// creates the langauageServiceRequest table (strong entity)
model sanitationServiceRequest {
  requestID    Int      @id @default(autoincrement())
  employeeName String
  department   String
  createdAt    DateTime @default(now())
  date         String
  time         String
  priority     String
  status       String
  cleanupType  String
  hospital     String
  description  String?
}

// creates the maintenanceServiceRequest table (strong entity)
model maintenanceServiceRequest {
  requestID       Int      @id @default(autoincrement())
  employeeName    String
  department      String
  createdAt       DateTime @default(now())
  date            String
  time            String
  priority        String
  status          String
  maintenanceType String
  hospital        String
  description     String?
}

// creates the securityServiceRequest table (strong entity)
model securityServiceRequest {
  requestID    Int      @id @default(autoincrement())
  employeeName String
  department   String
  createdAt    DateTime @default(now())
  date         String
  time         String
  security     String
  status       String
  priority     String
  hospital     String
  description  String
}

//added hospital^^

// creates the directory table (strong entity)
model directory {
  dName          String
  building       String
  description    String
  absoluteCoords Int[]

  @@id([dName, building])
}

model FloorMap {
  id    Int    @id @default(autoincrement())
  name  String
  nodes Node[]
  edges Edge[]
}

model Node {
  id              Int      @id @default(autoincrement())
  x               Int
  y               Int
  floor           Int
  map             FloorMap @relation(fields: [mapId], references: [id])
  mapId           Int
  name            String
  description     String
  nodeType        String
  connectingNodes Int[] // ids of all edges containing this node
}

model Edge {
  id     Int      @id @default(autoincrement())
  weight Float
  map    FloorMap @relation(fields: [mapId], references: [id])
  mapId  Int
  nodes  Int[] // ids of both nodes in this edge
}
